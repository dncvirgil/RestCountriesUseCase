User
I am working with .net and c#. I need a method to sort an IEnumerable<Country> based on country name. The model for country is this:
public class Country
{
    public Name Name { get; set; }
}
public class Name
{
    public string Common { get; set; }
    public string Official { get; set; }
    public Dictionary<string, NativeName> NativeName { get; set; }
}
Create a function that accepts a string as an attribute and can sort data by Name/Common property. 
The sort should accept string ` ascend or descend ` and sort countries name by provided attribute (e.g. providing attribute ascend all countries should be sorted from A to Z) 

ChatGPT
Sure! You can create a method that accepts the IEnumerable<Country> and a string parameter to sort the countries either in ascending or descending order based on the Name/Common property.

Here's the method:

csharp
Copy code
public static IEnumerable<Country> SortCountries(IEnumerable<Country> countries, string sortDirection)
{
    if (sortDirection.ToLower() == "ascend")
    {
        return countries.OrderBy(country => country.Name.Common);
    }
    else if (sortDirection.ToLower() == "descend")
    {
        return countries.OrderByDescending(country => country.Name.Common);
    }
    else
    {
        throw new ArgumentException("Invalid sort direction. Use 'ascend' or 'descend'.");
    }
}
You can use this method by calling it with the IEnumerable<Country> and the desired sort direction:

csharp
Copy code
var countries = new List<Country>
{
    new Country { Name = new Name { Common = "United States" } },
    new Country { Name = new Name { Common = "Australia" } },
    new Country { Name = new Name { Common = "India" } }
};

var sortedCountriesAscend = SortCountries(countries, "ascend");
var sortedCountriesDescend = SortCountries(countries, "descend");
The sortedCountriesAscend variable will hold the countries sorted by the Name/Common property in ascending order, and the sortedCountriesDescend variable will hold the countries sorted in descending order. Make sure to validate the input as needed, especially since the sorting direction is provided as a string. The example above does this by throwing an exception if an unrecognized sorting direction is provided.